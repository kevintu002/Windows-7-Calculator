{"version":3,"sources":["components/CalcDisplay.js","components/CalcKey.js","Calculator.js","index.js"],"names":["CalcDisplay","upperVal","lowerVal","className","data-testid","CalcKey","name","onClick","Calculator","useState","expression","setExpression","setLowerVal","prevKey","setPrevKey","mem","setMem","errorMsg","setErrorMsg","history","setHistory","operRegEx","RegExp","useEffect","handleDigit","newDigit","target","includes","test","prev","handleOperator","newOperator","newExpression","newLowerVal","slice","myEval","concat","oldExpression","stringArr","evaluate","join","map","i","index","val","isNaN","length","lastOperator","lastOperand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e5e2426.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CalcDisplay({upperVal, lowerVal}) {\r\n  return (\r\n    <div>\r\n      <div className=\"outer-div\">\r\n        <div className=\"inner-div sm-text\" data-testid=\"expression\">{upperVal}</div>\r\n      </div>\r\n      <div className=\"outer-div\">\r\n        <div className=\"inner-div lg-text\" data-testid=\"lowerVal\">{lowerVal}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default function CalcKey({name, onClick}) {\r\n  return (\r\n    <button name={name} onClick={onClick}>{name}</button>\r\n  )\r\n}","import './css/style.css';\r\nimport CalcDisplay from './components/CalcDisplay';\r\nimport CalcKey from './components/CalcKey';\r\nimport { useEffect, useState } from 'react';\r\nimport { evaluate } from 'mathjs';\r\n\r\nexport default function Calculator() {\r\n  const [expression, setExpression] = useState([])\r\n  const [lowerVal, setLowerVal] = useState('0')\r\n  const [prevKey, setPrevKey] = useState(null)\r\n  const [mem, setMem] = useState('0')\r\n  const [errorMsg, setErrorMsg] = useState('')\r\n  const [history, setHistory] = useState([ ['', ''], ['', ''], ['', ''], ['', ''], ['', '']])\r\n  const operRegEx = new RegExp('\\\\+|-|\\\\*|\\\\/')\r\n\r\n  useEffect(() => {\r\n    if (lowerVal === 'Infinity') {\r\n      setExpression([])\r\n      setLowerVal('0')\r\n      setPrevKey(null)\r\n      setErrorMsg('Cannot divide by zero')\r\n    }\r\n  }, [lowerVal])\r\n\r\n  const MClear = () => {\r\n    setMem('0')\r\n  }\r\n\r\n  const MRetrieve = () => {\r\n    setLowerVal(mem)\r\n    setPrevKey('MR')\r\n  }\r\n\r\n  const MStore = () => {\r\n    setMem(lowerVal)\r\n    if (!isNaN(prevKey))\r\n      setPrevKey('MS')\r\n  }\r\n\r\n  const MAdd = () => {\r\n    setMem(myEval([mem, '+', lowerVal]))\r\n  }\r\n\r\n  const MSubtract = () => {\r\n    setMem(myEval([mem, '-', lowerVal]))\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setExpression([])\r\n    setLowerVal('0')\r\n    setPrevKey(null)\r\n    setErrorMsg('')\r\n  }\r\n\r\n  const handleClearEntry = () => {\r\n    setLowerVal('0')\r\n    setPrevKey('CE')\r\n  }\r\n\r\n  const toggleSign = () => {\r\n    setLowerVal(prev => (prev * -1) + '')\r\n    setPrevKey('toggleSign')\r\n  }\r\n\r\n  const handleSqrt = () => {\r\n    // sqrt and inverse are handled the same way\r\n  }\r\n  \r\n  const handlePercent = () => {\r\n\r\n  }\r\n\r\n  const handleInverse = () => {\r\n\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    if (prevKey !== '=' && lowerVal !== '0') {\r\n      setLowerVal(prev => prev.length === 1 ? '0' : prev.slice(0, -1))\r\n\r\n      setPrevKey('del')\r\n    }\r\n  }\r\n\r\n  const handleDot = () => {\r\n    if (!lowerVal.includes('.')) {\r\n      if (prevKey === '=' || operRegEx.test(prevKey) \r\n      || (expression.length === 0 && lowerVal === '0'))\r\n      // prepend 0 under special cases\r\n        setLowerVal('0.')\r\n      else\r\n        setLowerVal(prev => prev + '.')\r\n      \r\n      setPrevKey('.')\r\n    }\r\n  }\r\n\r\n  const handleDigit = ({target}) => {\r\n    const newDigit = target.name;\r\n\r\n    if (!['=', 'MR', 'MS', 'hist'].includes(prevKey) && !operRegEx.test(prevKey)) {\r\n      // overwrite 0. otherwise, append\r\n      setLowerVal(prev => prev === '0' ? newDigit : prev + newDigit)\r\n    } else {\r\n      // next input overwrites lowerVal\r\n      if (prevKey === '=')\r\n        setExpression([])\r\n      \r\n      setLowerVal(newDigit)\r\n    }\r\n\r\n    setPrevKey(newDigit)\r\n  }\r\n\r\n  const handleOperator = ({target}) => {\r\n    const newOperator = target.name\r\n    let newExpression = expression\r\n    let newLowerVal = lowerVal\r\n    \r\n    if (operRegEx.test(prevKey)) {\r\n      // replace operator\r\n      newExpression = [...expression.slice(0,-1), newOperator]\r\n    } else if (['.', 'CE', 'toggleSign', 'MR', 'hist'].includes(prevKey)) {\r\n      // existing expression with last item as operator will append the lower value and the newOperator\r\n      // otherwise replace the expression with the evaluation and the newOperator\r\n      // remove dot\r\n      if (lowerVal.slice(-1)[0] === '.')\r\n        newLowerVal = lowerVal.slice(0,-1)\r\n\r\n      if (operRegEx.test(expression.slice(-1))) {\r\n        newExpression = [...expression, newLowerVal]\r\n      } else {\r\n        newExpression = [newLowerVal]\r\n      }\r\n\r\n      newLowerVal = myEval(newExpression)\r\n      newExpression = newExpression.concat(newOperator)\r\n    } else if (prevKey === '=') {\r\n      // append to existing expression\r\n      newLowerVal = myEval(expression)\r\n      newExpression = [newLowerVal, newOperator]\r\n    } else {\r\n      // evaluate and display current expression with new operator\r\n      const oldExpression = [...expression, lowerVal]\r\n\r\n      newLowerVal = myEval(oldExpression)\r\n      newExpression = oldExpression.concat(newOperator)      \r\n    }\r\n\r\n    setExpression(newExpression)\r\n    setLowerVal(newLowerVal)\r\n    setPrevKey(newOperator)\r\n  }\r\n\r\n  const myEval = (stringArr) => {\r\n    return evaluate(stringArr.join('')) + ''\r\n  }\r\n\r\n  const handleEqual = () => {\r\n    // console.log('expression: ' + expression)\r\n    // console.log('prevKey: ' + prevKey)\r\n    let newExpression = expression\r\n    let newLowerVal = lowerVal\r\n\r\n    if (!operRegEx.test(expression)) {\r\n      if (prevKey !== '.') {\r\n        newExpression = [lowerVal]\r\n      } else {\r\n        // remove dot from expression and lowerVal\r\n        newExpression = [lowerVal.slice(0,-1)]\r\n        newLowerVal = lowerVal.slice(0,-1)\r\n      }\r\n    } else if (['.', 'CE', 'toggleSign', 'MR', 'hist'].includes(prevKey)) {\r\n      // existing expression with last item as operator will append the lowerVal to expression \r\n      // otherwise repeat expression on the lowerVal\r\n      // remove dot\r\n      if (lowerVal.slice(-1)[0] === '.')\r\n        newLowerVal = lowerVal.slice(0,-1)\r\n\r\n      // was last item in expression was an operator?\r\n      if (operRegEx.test(expression.slice(-1))) {\r\n        newExpression = [...expression, newLowerVal]\r\n      } else {\r\n        // use last operator and operand on curr lowerVal\r\n        const [lastOperator, lastOperand] = expression.slice(-2)\r\n\r\n        newExpression = [newLowerVal, lastOperator, lastOperand]\r\n      } \r\n\r\n      newLowerVal = myEval(newExpression)\r\n    } else if (prevKey === '=') {\r\n      // repeat last operator and operand\r\n      const [lastOperator, lastOperand] = expression.slice(-2)\r\n\r\n      newExpression = [lowerVal, lastOperator, lastOperand]\r\n      newLowerVal = myEval([...expression, lastOperator, lastOperand])\r\n    } else {\r\n      // just append\r\n      newExpression = [...expression, lowerVal]\r\n      newLowerVal = myEval(newExpression)\r\n    }\r\n\r\n    setHistory([...history, [newExpression.join(''), newLowerVal] ])\r\n    setExpression(newExpression)\r\n    setLowerVal(newLowerVal)\r\n    setPrevKey('=')\r\n  }\r\n\r\n  const handleHistory = (val) => () => {\r\n    if (val !== '') {\r\n      setLowerVal(val)\r\n      setPrevKey('hist')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className=\"calculator\" >\r\n      <div className=\"menu\"><span>V</span>iew&nbsp;&nbsp; <span>E</span>dit&nbsp;&nbsp; <span>H</span>elp</div>\r\n\r\n      <div className=\"display\">\r\n        <div className=\"outer-div\">\r\n          {history.slice(-5).map((i, index) =>\r\n            <div className=\"history\" key={index} onClick={handleHistory(i[1])}>{i[0]}</div>\r\n          )}\r\n        </div>\r\n        \r\n        <CalcDisplay upperVal={expression} lowerVal={lowerVal} />\r\n        <div className=\"error\">{errorMsg}</div>\r\n        <div className=\"m-icon\">{mem !== '0' ? 'M' : ''}</div>\r\n      </div>\r\n\r\n      <div className=\"keyboard\">\r\n      </div>\r\n\r\n      <div className=\"keyboard-bot\">\r\n        <CalcKey name=\"MC\" onClick={MClear}/><CalcKey name=\"MR\" onClick={MRetrieve}/><CalcKey name=\"MS\" onClick={MStore}/><CalcKey name=\"M+\" onClick={MAdd}/><CalcKey name=\"M-\" onClick={MSubtract}/><br/>\r\n        <CalcKey name=\"Del\" onClick={handleDelete}/><CalcKey name=\"CE\" onClick={handleClearEntry}/><CalcKey name=\"C\" onClick={handleClear}/><CalcKey name=\"±\" onClick={toggleSign}/><CalcKey name=\"√\" onClick={handleSqrt}/><br/>\r\n        <CalcKey name=\"7\" onClick={handleDigit}/><CalcKey name=\"8\" onClick={handleDigit}/><CalcKey name=\"9\" onClick={handleDigit}/><CalcKey name=\"/\" onClick={handleOperator}/><CalcKey name=\"%\" onClick={handlePercent} /><br/>\r\n        <CalcKey name=\"4\" onClick={handleDigit}/><CalcKey name=\"5\" onClick={handleDigit}/><CalcKey name=\"6\" onClick={handleDigit}/><CalcKey name=\"*\" onClick={handleOperator}/><CalcKey name=\"1/x\" onClick={handleInverse} /><br/>\r\n        <CalcKey name=\"1\" onClick={handleDigit}/><CalcKey name=\"2\" onClick={handleDigit}/><CalcKey name=\"3\" onClick={handleDigit}/><CalcKey name=\"-\" onClick={handleOperator}/><br/>\r\n        <CalcKey name=\"0\" onClick={handleDigit}/><CalcKey name=\".\" onClick={handleDot}/><CalcKey name=\"+\" onClick={handleOperator}/><CalcKey name=\"=\" onClick={handleEqual}/>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport Calculator from './Calculator';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n      <Calculator />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}